(()=>{"use strict";var e={130:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Component=void 0,t.Component=class{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}},394:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectItem=void 0;const s=n(499),o=n(130);class i extends o.Component{get persons(){return 1===this.project.people?"1 person":`${this.project.people} persons`}constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log("DragEnd")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}t.ProjectItem=i,r([s.autobind],i.prototype,"dragStartHandler",null)},853:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectList=void 0;const s=n(499),o=n(130),i=n(354),a=n(683),l=n(394);class c extends o.Component{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");a.projectState.moveProject(t,"active"===this.type?i.ProjectStatus.Active:i.ProjectStatus.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),a.projectState.addListener((e=>{const t=e.filter((e=>"active"===this.type?e.status===i.ProjectStatus.Active:e.status===i.ProjectStatus.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new l.ProjectItem(this.element.querySelector("ul").id,e)}}t.ProjectList=c,r([s.autobind],c.prototype,"dragOverHandler",null),r([s.autobind],c.prototype,"dropHandler",null),r([s.autobind],c.prototype,"dragLeaveHandler",null)},650:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var s,o=arguments.length,i=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(i=(o<3?s(i):o>3?s(t,n,i):s(t,n))||i);return o>3&&i&&Object.defineProperty(t,n,i),i};Object.defineProperty(t,"__esModule",{value:!0}),t.ProjectInput=void 0;const s=n(130),o=n(518),i=n(499),a=n(683);class l extends s.Component{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,n=this.peopleInputElement.value,r={value:e,required:!0},s={value:t,required:!0,minLength:5},i={value:+n,required:!0,min:1,max:5};return(0,o.validate)(r)&&(0,o.validate)(s)&&(0,o.validate)(i)?[e,t,+n]:void alert("Invalid input, please try again!")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;a.projectState.addProject(e,n,r),this.clearInputs()}}}t.ProjectInput=l,r([i.autobind],l.prototype,"submitHandler",null)},499:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.autobind=void 0,t.autobind=function(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}},354:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Project=t.ProjectStatus=void 0,function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(n||(t.ProjectStatus=n={})),t.Project=class{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.people=r,this.status=s}}},683:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.projectState=t.ProjectState=t.State=void 0;const r=n(354);class s{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}t.State=s;class o extends s{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new o),this.instance}addProject(e,t,n){const s=new r.Project(Math.random().toString(),e,t,n,r.ProjectStatus.Active);this.projects.push(s),this.updateListeners()}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}t.ProjectState=o,t.projectState=o.getInstance()},518:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validate=void 0,t.validate=function(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(()=>{const e=n(650),t=n(853);new e.ProjectInput,new t.ProjectList("active"),new t.ProjectList("finished")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,